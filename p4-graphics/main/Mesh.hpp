/**
 * @file Mesh.hpp
 * @author Andrés Ragot (github.com/andresragot)
 * @brief This file implements the Mesh class, which represents a 3D mesh in the Ragot engine.
 * @details The Mesh class is a base class for creating 3D meshes with vertices and faces.
 * It provides methods to generate vertices and faces, apply transformations, and manage mesh information.
 * The class also includes methods for setting and getting the color of the mesh.
 * @version 1.0
 * @date 2025-06-01
 * 
 * @copyright Copyright (c) 2025
 * MIT License
 * 
 * Copyright (c) 2025 Andrés Ragot 
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#pragma once

#include "CommonTypes.hpp"
#include "Camera.hpp"
#include <vector>
#include "Components.hpp"
#include <glm.hpp>

namespace Ragot
{
    /**
     * @class Mesh
     * @brief Represents a 3D mesh in the Ragot engine.
     * 
     * The Mesh class is a base class for creating 3D meshes with vertices and faces.
     * It provides methods to generate vertices and faces, apply transformations, and manage mesh information.
     * The class also includes methods for setting and getting the color of the mesh.
     */
    class Mesh : public Component
    {
    protected:
        
        mesh_info_t mesh_info; ///< Information about the mesh, including coordinates and rendering type.
        uint16_t color = 0xFFFF; ///< Color of the mesh, default is white (0xFFFF).
        
        std::vector < glm::fvec4 > vertices; ///< Vector of vertices representing the mesh in 3D space.
        std::vector <   face_t > faces; ///< Vector of faces representing the mesh, each face can be a triangle or a quad.
        
        int slices = 16; ///< Number of slices for generating the mesh, default is 16.
        
    public:
        /**
         * @brief Construct a new Mesh object (deleted constructor).
         */
        Mesh() = delete;

        /**
         * @brief Default virtual destructor for the Mesh class.
         * 
         * Cleans up the mesh and its resources.
         */
        virtual ~Mesh() = default;
       
        /**
         * @brief Construct a new Mesh object with mesh information.
         * 
         * Initializes the mesh with the provided mesh information.
         * 
         * @param mesh_info Information about the mesh, including coordinates and rendering type.
         */
        Mesh(mesh_info_t & mesh_info);
        
        /**
         * @brief Generate vertices for the mesh.
         * 
         * This method is pure virtual and must be implemented by derived classes.
         * It is responsible for generating the vertices of the mesh based on the mesh information.
         */
        virtual void generate_vertices() = 0;

        /**
         * @brief Generate faces for the mesh.
         * 
         * This method is pure virtual and must be implemented by derived classes.
         * It is responsible for generating the faces of the mesh based on the vertices generated by generate_vertices.
         */
        virtual void generate_faces() = 0;
        
        /**
         * @brief Get the vertices object
         * 
         * @return const std::vector < glm::fvec4 >& 
         */
        const std::vector < glm::fvec4 > & get_vertices() const { return vertices; }

        /**
         * @brief Get the faces object
         * 
         * @return const std::vector < face_t >& 
         */
        const std::vector <   face_t > & get_faces()    const { return faces;    }


        /**
         * @brief Get the total vertices object
         * 
         * @return const size_t 
         */
        const size_t get_total_vertices() const { return vertices.size(); }

        /**
         * @brief Get the total vertices object
         * 
         * @return size_t 
         */
              size_t get_total_vertices()       { return vertices.size(); }

        /**
         * @brief Recalculate the mesh vertices and faces.
         */
        void recalculate()
        {
            vertices.clear();
            faces.clear();
            
            generate_vertices();
            generate_faces();
            
            apply_transform_to_vertices();
        }
        
        /**
         * @brief Apply the current transformation to the vertices of the mesh.
         * This method applies the transformation matrix obtained from the Transform class to each vertex in the mesh.
         * This is useful for updating the mesh vertices after any transformation has been applied, such as translation, rotation, or scaling.
         * It modifies the vertices in place, transforming them according to the current transformation matrix.
         */
        void apply_transform_to_vertices()
        {
            glm::mat4 M = get_transform_matrix();
            for (auto & v : vertices)
            {
                v = M * v;
            }
        }

        /**
         * @brief Set the color of the mesh.
         * 
         * This method sets the color of the mesh to the specified new color.
         * 
         * @param new_color The new color to set for the mesh.
         */
        void set_color(uint16_t new_color)
        {
            color = new_color;
        }

        /**
         * @brief Get the color of the mesh.
         * 
         * This method returns the current color of the mesh.
         * 
         * @return uint16_t The color of the mesh.
         */
        uint16_t get_color() const
        {
            return color;
        }
    };
}
