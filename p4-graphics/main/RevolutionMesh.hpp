/**
 * @file RevolutionMesh.hpp
 * @author Andrés Ragot (github.com/andresragot)
 * @brief Implementation of the RevolutionMesh class for generating revolution meshes.
 * @details The RevolutionMesh class generates a mesh by revolving a 2D profile around an axis.
 * @version 1.0
 * @date 2025-06-01
 * 
 * @copyright Copyright (c) 2025
 * MIT License
 * 
 * Copyright (c) 2025 Andrés Ragot 
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#pragma once

#include "Mesh.hpp"
#include "Camera.hpp"
#include <iostream>

namespace Ragot
{
    /**
     * @class RevolutionMesh
     * @brief Class for generating revolution meshes.
     * 
     * This class generates a mesh by revolving a 2D profile around an axis.
     * It inherits from the Mesh class and implements the methods to generate vertices and faces.
     */
    class RevolutionMesh : public Mesh
    {
    protected:
        const Camera & cam; ///< Reference to the camera used for rendering, providing view direction and other properties.
        bool faces_can_be_quads; ///< Flag indicating whether the faces can be rendered as quads or triangles.
        static constexpr float PI = 3.14159265358979323846f; ///< Constant value for Pi, used in calculations involving angles and rotations.
    public:
        /**
         * @brief Constructor for the RevolutionMesh class.
         * 
         * Initializes the mesh with the provided mesh information and camera.
         * 
         * @param mesh_info Information about the mesh, including coordinates and rendering type.
         * @param cam Reference to the camera used for rendering.
         */
        RevolutionMesh (mesh_info_t & mesh_info, const Camera & cam) : Mesh (mesh_info), cam (cam)
        {
            faces_can_be_quads = (mesh_info.vertex_amount % 8 == 0 || mesh_info.vertex_amount == 4);
            vertices.reserve (mesh_info.coordinates.size() * (slices + 1));
               faces.reserve (mesh_info.coordinates.size() *  slices);
            
            generate_vertices();
            generate_faces();
            
            std::cout << "Revolution Vertices: " << vertices.size() << std::endl;
            std::cout << "Revolution Faces: " << faces.size() << std::endl;
        }
        
        /**
         * @brief Default destructor for the RevolutionMesh class.
         * 
         * Cleans up resources used by the mesh.
         */
       ~RevolutionMesh() = default;
        
        /**
         * @brief Generates the vertices for the revolution mesh.
         * 
         * This method calculates the vertices by revolving the 2D profile around the specified axis.
         * It uses the camera's view direction to determine the local space for the vertices.
         */
        void generate_vertices () override;

        /**
         * @brief Generates the faces for the revolution mesh.
         * 
         * This method creates the faces of the mesh by connecting the vertices generated by generate_vertices.
         * It can create either triangles or quads based on the mesh information and the flag faces_can_be_quads.
         */
        void generate_faces    () override;
    };
}
